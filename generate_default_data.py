# -*- coding: utf-8 -*-

"""
/***************************************************************************
 GenerateSwmmInp
                                 A QGIS plugin
 This plugin generates SWMM Input files
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-07-09
        copyright            : (C) 2021 by Jannik Schilling
        email                : jannik.schilling@posteo.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Jannik Schilling'
__date__ = '2021-07-09'
__copyright__ = '(C) 2021 by Jannik Schilling'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProject,
                       QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingContext,
                       QgsProcessingException,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterFile,
                       QgsProcessingParameterVectorLayer,
                       QgsVectorLayer)
import processing
import os
import shutil
pluginPath = os.path.dirname(__file__)


class GenerateDefaultFolder(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    PROJ_FILE = 'PROJ_FILE'
    OUTPUT = 'OUTPUT'
    
    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        #We add the input vector features source. It can have any kind of
        #geometry.
        self.addParameter(
            QgsProcessingParameterFile(
            self.PROJ_FILE,
            self.tr('actual QGIS project file'),
            extension = 'qgz'
            )
        )
        
        # self.addParameter(
            # QgsProcessingParameterVectorLayer(
            # self.OUTPUT,
            # self.tr('erg')
            # )
        # )
        

    def processAlgorithm(self, parameters, context, feedback):
        # output = self.parameterAsOutputLayer(parameters, self.OUTPUT, context)
        project_file_name = self.parameterAsString(parameters, self.PROJ_FILE, context)
        project_dir = os.path.dirname(project_file_name)
        #project_dir = QgsProject.instance().homePath()
        data_save_folder = os.path.join(project_dir,'swmm_data')
        if not os.path.exists(data_save_folder):
            os.makedirs(data_save_folder)

        data_path = os.path.join(pluginPath,'test_data','swmm_data')
        files_list = [f for f in os.listdir(data_path)]
        
        try:
            for f in files_list:
                f2 = os.path.join(data_path,f)
                shutil.copy(f2, data_save_folder)
            feedback.setProgressText(self.tr('Files saved to folder '+data_save_folder))
        except:
            raise QgsProcessingException(self.tr('Could not add default files to chosen folder'))
        

        
        # conduits
        conduits = QgsVectorLayer(os.path.join(data_save_folder, 'SWMM_conduits.shp'), 'SWMM_conduits', "ogr")
        conduits.loadNamedStyle(os.path.join(data_save_folder,'style_conduits.qml'))
        context.temporaryLayerStore().addMapLayer(conduits)
        context.addLayerToLoadOnCompletion(conduits.id(), QgsProcessingContext.LayerDetails("", QgsProject.instance(), ""))
        
        # junctions
        junctions = QgsVectorLayer(os.path.join(data_save_folder, 'SWMM_junctions.shp'), 'SWMM_junctions', "ogr")
        junctions.loadNamedStyle(os.path.join(data_save_folder,'style_junctions.qml'))
        context.temporaryLayerStore().addMapLayer(junctions)
        context.addLayerToLoadOnCompletion(junctions.id(), QgsProcessingContext.LayerDetails("", QgsProject.instance(), ""))
        
        # outfalls
        outfalls = QgsVectorLayer(os.path.join(data_save_folder, 'SWMM_outfalls.shp'), 'SWMM_outfalls', "ogr")
        outfalls.loadNamedStyle(os.path.join(data_save_folder,'style_outfalls.qml'))
        context.temporaryLayerStore().addMapLayer(outfalls)
        context.addLayerToLoadOnCompletion(outfalls.id(), QgsProcessingContext.LayerDetails("", QgsProject.instance(), ""))
        
        # pumps
        pumps = QgsVectorLayer(os.path.join(data_save_folder, 'SWMM_pumps.shp'), 'SWMM_pumps', "ogr")
        pumps.loadNamedStyle(os.path.join(data_save_folder,'style_pumps.qml'))
        context.temporaryLayerStore().addMapLayer(pumps)
        context.addLayerToLoadOnCompletion(pumps.id(), QgsProcessingContext.LayerDetails("", QgsProject.instance(), ""))
        
         # storages
        storages = QgsVectorLayer(os.path.join(data_save_folder, 'SWMM_storages.shp'), 'SWMM_storages', "ogr")
        storages.loadNamedStyle(os.path.join(data_save_folder,'style_storages.qml'))
        context.temporaryLayerStore().addMapLayer(storages)
        context.addLayerToLoadOnCompletion(storages.id(), QgsProcessingContext.LayerDetails("", QgsProject.instance(), ""))
        
        # subcatchments
        subcatchments = QgsVectorLayer(os.path.join(data_save_folder, 'SWMM_subcatchments.shp'), 'SWMM_subcatchments', "ogr")
        subcatchments.loadNamedStyle(os.path.join(data_save_folder,'style_catchments.qml'))
        context.temporaryLayerStore().addMapLayer(subcatchments)
        context.addLayerToLoadOnCompletion(subcatchments.id(), QgsProcessingContext.LayerDetails("", QgsProject.instance(), ""))
        
        # weirs
        weirs = QgsVectorLayer(os.path.join(data_save_folder, 'SWMM_weirs.shp'), 'SWMM_weirs', "ogr")
        weirs.loadNamedStyle(os.path.join(data_save_folder,'style_regulators.qml'))
        context.temporaryLayerStore().addMapLayer(weirs)
        context.addLayerToLoadOnCompletion(weirs.id(), QgsProcessingContext.LayerDetails("", QgsProject.instance(), ""))
        return {}

    def name(self):
        return 'GenerateDefaultFolder'

    def displayName(self):
        return self.tr(self.name())

    def group(self):
        return self.tr(self.groupId())

    def groupId(self):
        return ''

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return GenerateDefaultFolder()
