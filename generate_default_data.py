# -*- coding: utf-8 -*-

"""
/***************************************************************************
 GenerateSwmmInp
                                 A QGIS plugin
 This plugin generates SWMM Input files
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-07-09
        copyright            : (C) 2021 by Jannik Schilling
        email                : jannik.schilling@posteo.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Jannik Schilling'
__date__ = '2021-07-09'
__copyright__ = '(C) 2021 by Jannik Schilling'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProject,
                       QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingContext,
                       QgsProcessingException,
                       QgsProcessingParameterFile,
                       QgsProcessingParameterFolderDestination,
                       QgsVectorLayer)
import processing
import os
import shutil
pluginPath = os.path.dirname(__file__)


class GenerateDefaultFolder(QgsProcessingAlgorithm):
    """
    generates default data
    """

    # Constants 
    SWMM_FOLDER = 'SWMM_FOLDER'

    
    def initAlgorithm(self, config):
        """
        inputs and output of the algorithm
        """

        self.addParameter(
            QgsProcessingParameterFolderDestination(
            self.SWMM_FOLDER,
            self.tr('Where should the default data be saved? Select/Create a folder')
            )
        )
        


    def processAlgorithm(self, parameters, context, feedback):
        data_save_folder = self.parameterAsString(parameters, self.SWMM_FOLDER, context)
        if not os.path.exists(data_save_folder):
            os.makedirs(data_save_folder)

        data_path = os.path.join(pluginPath,'test_data','swmm_data')
        files_list = [f for f in os.listdir(data_path)]
        
        try:
            for f in files_list:
                f2 = os.path.join(data_path,f)
                shutil.copy(f2, data_save_folder)
            feedback.setProgressText(self.tr('Files saved to folder '+data_save_folder))
        except:
            raise QgsProcessingException(self.tr('Could not add default files to chosen folder'))
        

        """ conduits """
        conduits = QgsVectorLayer(os.path.join(data_save_folder, 'SWMM_conduits.shp'), 'SWMM_conduits', "ogr")
        conduits.loadNamedStyle(os.path.join(data_save_folder,'style_conduits.qml'))
        context.temporaryLayerStore().addMapLayer(conduits)
        context.addLayerToLoadOnCompletion(conduits.id(), QgsProcessingContext.LayerDetails("", QgsProject.instance(), ""))
        
        """ junctions """
        junctions = QgsVectorLayer(os.path.join(data_save_folder, 'SWMM_junctions.shp'), 'SWMM_junctions', "ogr")
        junctions.loadNamedStyle(os.path.join(data_save_folder,'style_junctions.qml'))
        context.temporaryLayerStore().addMapLayer(junctions)
        context.addLayerToLoadOnCompletion(junctions.id(), QgsProcessingContext.LayerDetails("", QgsProject.instance(), ""))
        
        """ outfalls """
        outfalls = QgsVectorLayer(os.path.join(data_save_folder, 'SWMM_outfalls.shp'), 'SWMM_outfalls', "ogr")
        outfalls.loadNamedStyle(os.path.join(data_save_folder,'style_outfalls.qml'))
        context.temporaryLayerStore().addMapLayer(outfalls)
        context.addLayerToLoadOnCompletion(outfalls.id(), QgsProcessingContext.LayerDetails("", QgsProject.instance(), ""))
        
        """ pumps """
        pumps = QgsVectorLayer(os.path.join(data_save_folder, 'SWMM_pumps.shp'), 'SWMM_pumps', "ogr")
        pumps.loadNamedStyle(os.path.join(data_save_folder,'style_pumps.qml'))
        context.temporaryLayerStore().addMapLayer(pumps)
        context.addLayerToLoadOnCompletion(pumps.id(), QgsProcessingContext.LayerDetails("", QgsProject.instance(), ""))
        
        """ storages """
        storages = QgsVectorLayer(os.path.join(data_save_folder, 'SWMM_storages.shp'), 'SWMM_storages', "ogr")
        storages.loadNamedStyle(os.path.join(data_save_folder,'style_storages.qml'))
        context.temporaryLayerStore().addMapLayer(storages)
        context.addLayerToLoadOnCompletion(storages.id(), QgsProcessingContext.LayerDetails("", QgsProject.instance(), ""))
        
        """ subcatchments """
        subcatchments = QgsVectorLayer(os.path.join(data_save_folder, 'SWMM_subcatchments.shp'), 'SWMM_subcatchments', "ogr")
        subcatchments.loadNamedStyle(os.path.join(data_save_folder,'style_catchments.qml'))
        context.temporaryLayerStore().addMapLayer(subcatchments)
        context.addLayerToLoadOnCompletion(subcatchments.id(), QgsProcessingContext.LayerDetails("", QgsProject.instance(), ""))
        
        """ weirs """
        weirs = QgsVectorLayer(os.path.join(data_save_folder, 'SWMM_weirs.shp'), 'SWMM_weirs', "ogr")
        weirs.loadNamedStyle(os.path.join(data_save_folder,'style_regulators.qml'))
        context.temporaryLayerStore().addMapLayer(weirs)
        context.addLayerToLoadOnCompletion(weirs.id(), QgsProcessingContext.LayerDetails("", QgsProject.instance(), ""))
        
        """ outlets """
        outlets = QgsVectorLayer(os.path.join(data_save_folder, 'SWMM_outlets.shp'), 'SWMM_outlets', "ogr")
        outlets.loadNamedStyle(os.path.join(data_save_folder,'style_regulators.qml'))
        context.temporaryLayerStore().addMapLayer(outlets)
        context.addLayerToLoadOnCompletion(outlets.id(), QgsProcessingContext.LayerDetails("", QgsProject.instance(), ""))
        return {}

    def name(self):
        return 'GenerateDefaultFolder'
        
    def shortHelpString(self):
        return self.tr(""" The tool generates default swmm data in a folder selected by the user.\n 
        Choosing a folder name such as \"swmm_data\" is recommended.\n
        The default layers (shapefiles) are added to the QGIS project.\n
        You can now edit layers and tables in the folder to create your first inp file with the second tool.
        """)

    def displayName(self):
        return self.tr('1_GenerateDefaultData')

    def group(self):
        return self.tr(self.groupId())

    def groupId(self):
        return ''

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return GenerateDefaultFolder()
